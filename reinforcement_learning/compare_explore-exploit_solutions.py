import numpy as np 
import matplotlib.pyplot as plt 

from optimistic_initial_values import run_optimistic_init_value 
from thompson_sampling import run_thompson_sampling_experiment
from ucb1 import run_ucb1

# modify epsilon-greedy since it performs subpar:
# make epsilon decay: epsilon(t) = 1/t, where t - iteration number


class Bandit:
	def __init__(self, true_mean):
		self.true_mean = true_mean # we are manufacturers of this bandit - 
		                           # we set its win-rate ourselves
		self.N = 0
		self.mean = 0 # running mean

	def pull(self):
		# play the bandit:
		return np.random.randn() + self.true_mean

	def update(self, x):
		# x - is a new reward;
		self.N += 1
		self.mean = (1 - 1.0 / self.N) * self.mean + 1.0 / self.N * x


def run_epsilon_greedy_with_decay(m1, m2, m3, N):
	bandits = [Bandit(m1), Bandit(m2), Bandit(m3)]

	# srorage for the data to be collected:
	data = np.empty(N)

	for i in range(N):
		epsilon = 1.0 / (i + 1) # to avoid zero-division
		if np.random.random() < epsilon:
			# explore - play a random bandit:
			bandit = np.random.choice(bandits)			
		else:
			# exploit - play the-best-so-far bandit:
			bandit = bandits[ np.argmax( [bandit.mean for bandit in bandits] ) ]
			
		reward = bandit.pull()
		bandit.update(reward)

		data[i] = reward

	data_cum_avg = np.cumsum(data) / (np.arange(N) + 1)

	# print the estimated means (win-rates) of each bandit:
	for bandit in bandits:
		print(bandit.mean)

	# display the cumulative average of the collected reward along with the true-means:
	plt.plot(data_cum_avg)
	plt.plot(np.ones(N)*m1)
	plt.plot(np.ones(N)*m2)
	plt.plot(np.ones(N)*m3)
	plt.xscale('log')
	plt.show()


	return data_cum_avg


if __name__ == '__main__':
	m1, m2, m3 = 1.0, 2.0, 3.0
	N = 100000

	eps = run_epsilon_greedy_with_decay(m1, m2, m3, N)
	oiv = run_optimistic_init_value(m1, m2, m3, N)
	ucb1 = run_ucb1(m1, m2, m3, N)
	bayes = run_thompson_sampling_experiment(m1, m2, m3, N)

	# log-scale plot:
	plt.plot(eps, label='epsilon-greedy_with_decay')
	plt.plot(oiv, label='optimistic')
	plt.plot(ucb1, label='ucb1')
	plt.plot(bayes, label='thompson_sampling')
	plt.legend()
	plt.ylabel('average reward')
	plt.xlabel('plays')
	plt.title('Cumulative Averages - Log-Scale Plot')
	plt.xscale('log')
	plt.show()

	# linear plot:
	plt.plot(eps, label='epsilon-greedy_with_decay')
	plt.plot(oiv, label='optimistic')
	plt.plot(ucb1, label='ucb1')
	plt.plot(bayes, label='thompson_sampling')
	plt.ylabel('average reward')
	plt.xlabel('plays')
	plt.title('Cumulative Averages - Linear Plot')
	plt.legend()
	plt.show()




